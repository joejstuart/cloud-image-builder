#!/usr/bin/env groovy


pipeline {
    agent {
        label 'master'
    }

    stages {

        stage('decorate-build') {
            steps {
                script {
                    decoratePRBuild()()
                }
            }
        }

        stage('run-tests') {
            parallel {
                stage('centos-aws') {
                    when {
                        anyOf {
                            changeset glob: "*ami*"
                            changeset glob: "*aws*"
                            changeset glob: "*ec2*"
                        }
                    }

                    steps {
                        script {
                            def imageParams = readProperties file: 'environment.aws'

                            if (env.CHANGE_ID) {
                                imageParams['AWS_INSTANCE_NAME'] = "${imageParams['AWS_INSTANCE_NAME']}-PR-${env.CHANGE_ID}"
                                // used to decorate the build
                                imageParams['CHANGE_BRANCH'] = env.CHANGE_BRANCH
                                imageParams['CHANGE_AUTHOR'] = env.CHANGE_AUTHOR
                            } else {
                                imageParams['AWS_INSTANCE_NAME'] = "${imageParams['AWS_INSTANCE_NAME']}-branch-${env.BRANCH_NAME}"
                            }

                            scheduleBuild(buildName: 'centos-aws-image-build', params: imageParams, triggerRetryCount: 1)
                        }
                    }
                }

                stage('centos-gcp') {
                    when {
                        anyOf {
                            changeset glob: "*gcp*"
                        }
                    }

                    steps {
                        script {
                            def imageParams = readProperties file: 'environment.gcp'
                            scheduleBuild(buildName: 'centos-gcp-image-build', params: imageParams, triggerRetryCount: 1)
                        }
                    }
                }
            }
        }
    }
}
